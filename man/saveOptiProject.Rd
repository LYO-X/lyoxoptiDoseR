% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saveOptiProject.R
\name{saveOptiProject}
\alias{saveOptiProject}
\title{Realize and save your OptiProject}
\usage{
saveOptiProject(
  optiProject,
  name,
  save_path = NULL,
  pop = FALSE,
  iiv = FALSE,
  sim = FALSE,
  n_id = 1,
  parametrisation = "log",
  lower_parm_limits = NULL,
  upper_parm_limits = NULL,
  const_err = 1e-04,
  create_mlx = TRUE,
  separate = FALSE,
  run_nlmixr2 = FALSE,
  control = list()
)
}
\arguments{
\item{optiProject}{A optiProject-object with a model, penalizations, dose levels, and parameters.
For requirements regarding penalizations, dose levels, and parameters, see details.}

\item{name}{Name under which optiProject will be saved (.mlxtran will be added for Monolix, and 
.ctl for NONMEM).}

\item{save_path}{Path, where optiProject should be saved.}

\item{pop}{Whether multiple subjects should be used (TRUE), either from added individual parameters or
simulated from population parameters, or if only one subject with population parameters should be used
(FALSE).}

\item{iiv}{Whether doses should include inter-individual variability (TRUE) or not (FALSE).}

\item{sim}{If \code{pop=TRUE}, whether individuals should be simulated (TRUE) or added individual
parameters should be used (FALSE).}

\item{n_id}{If \code{pop=TRUE} and \code{sim=TRUE}, number of individuals to be simulated.}

\item{parametrisation}{If a Monolix-optiProject was created and a population of individuals is simulated
(\code{pop=TRUE} and \code{sim=TRUE}), the parametrisation of the parameters in the Monolix model
must be given. Must be in "log","normal",or "logit". If all parameters have same parametrisation,
a single string can be given. If different parametrisations for different parameters are required, a vector
with parametrisation for each parameter is required. Default is "log" for all parameters.}

\item{lower_parm_limits}{If one or multiple parameters in the model are "logit" distributed and individuals
are simulated, the lower limit(s) for the "logit"-distributed parameter(s).}

\item{upper_parm_limits}{If one or multiple parameters in the model are "logit" distributed and individuals
are simulated, the upper limit(s) for the "logit"-distributed parameter(s).}

\item{const_err}{If doses are estimated with inter-individual variability for a population of individual
subjects, \code{const_err} defines the balance between fulfilling the objectives (constraints, target values etc.)
and having the doses log-normal distributed. For more detail, see \emph{Details}.}

\item{create_mlx}{If optiProject-software is "Monolix", whether directly a Monolix project (.mlxtran file) should
be created. Default is TRUE.}

\item{run_nlmixr2}{If optiProject-object is for nlmixr2, whether the generated nlmixr2 optiProject should directly be run.}

\item{control}{If optiProject-object if for nlmixr2 and \code{run_nlmixr2=TRUE}, list of control arguments given to nlmxir2. If \code{iiv=FALSE},
control for "bobyqa" and if \code{iiv=TRUE} control for "saem" must be given.}

\item{seperate}{If \code{pop=TRUE} and \code{iiv=FALSE}, whether individuals should be fitted separately (TRUE) or
all individuals should be fitted together.}
}
\description{
This function generates the required data, the model file from the OptiProject object,
and if it is a Monolix-OptiProject, the corresponding .mlxtran file
}
\details{
The optiProject needs to have added a \emph{Model}, at least one penalization (i.e., constraint, 
secondary target, target value or function), and at least one dose level. Additionally, either
population parameters or individual parameters need to be added.
If doses are estimated with inter-individual variability, the objective function consists of term
that tries to minimize the penalization and a term that aims at having normal distributed random effects.
The term that minimizes the penalization is scaled by the residual error term, thus by fixing a small
constant error, emphasize is given to minimizing the penalization. So if simulations with estimated
individual doses show that targets are not met, reducing \code{const_err} will result in better meeting
the targets.
}
\examples{
\dontrun{
warf_proj <- newOptiProject("Monolix") \%>\%
                  addPmxRun("../inst/warfarinPKPD_project.mlxtran",
                            lixoft_path = "C:/ProgramData/Lixoft/MonolixSuite2021R2") \%>\%
                  addConstraintAUC("R",limit=30,pen_time = c(0,200),
                                  eval_time=200,pen_values="below",gamma=1000) \%>\%
                  addSecondaryAUC("Cc",pen_values = "low",pen_time = c(0,500),eval_time=500) \%>\%
                  addDoseLevel(time=0,ini_est = 100) \%>\%
                  addDoseLevel(time=100,ini_est = 100)
                  
saveOptiProject(warf_proj,"warf_optiDose",save_path = "~",
                parametrisation = c("log","log","log","log","log","log","logit","log"),
                lower_parm_limits = 0,
                upper_parm_limits = 1)
}
}
\author{
Dominic Br√§m
}
